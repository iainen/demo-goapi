// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricQueryServiceClient is the client API for MetricQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricQueryServiceClient interface {
	QueryCpuUsage(ctx context.Context, in *CpuUsagesssParam, opts ...grpc.CallOption) (*CpuUsageRsp, error)
	QueryProcessStatFd(ctx context.Context, in *ProcessStatFdParam, opts ...grpc.CallOption) (*ProcessStatFdRsp, error)
	QueryProcessStatRss(ctx context.Context, in *ProcessStatRssParam, opts ...grpc.CallOption) (*ProcessStatRssRsp, error)
	QueryProcessStatVirtualSize(ctx context.Context, in *ProcessStatVirtualSizeParam, opts ...grpc.CallOption) (*ProcessStatVirtualSizeRsp, error)
	QueryJvmMem(ctx context.Context, in *JvmMemParam, opts ...grpc.CallOption) (*JvmMemRsp, error)
	QueryJvmGcCount(ctx context.Context, in *JvmGcCountParam, opts ...grpc.CallOption) (*JvmGcCountRsp, error)
	QueryJvmGcCostTime(ctx context.Context, in *JvmGcCostTimeParam, opts ...grpc.CallOption) (*JvmGcCostTimeRsp, error)
	QueryJvmThread(ctx context.Context, in *JvmThreadParam, opts ...grpc.CallOption) (*JvmThreadRsp, error)
	QueryJvmClass(ctx context.Context, in *JvmClassParam, opts ...grpc.CallOption) (*JvmClassRsp, error)
	QueryGoMem(ctx context.Context, in *GoMemParam, opts ...grpc.CallOption) (*GoMemRsp, error)
	QueryGoGcCount(ctx context.Context, in *GoGcCountParam, opts ...grpc.CallOption) (*GoGcCountRsp, error)
	QueryGoroutineCount(ctx context.Context, in *GoroutineCountParam, opts ...grpc.CallOption) (*GoroutineCountRsp, error)
}

type metricQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricQueryServiceClient(cc grpc.ClientConnInterface) MetricQueryServiceClient {
	return &metricQueryServiceClient{cc}
}

func (c *metricQueryServiceClient) QueryCpuUsage(ctx context.Context, in *CpuUsagesssParam, opts ...grpc.CallOption) (*CpuUsageRsp, error) {
	out := new(CpuUsageRsp)
	err := c.cc.Invoke(ctx, "/demo.v3.MetricQueryService/queryCpuUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricQueryServiceClient) QueryProcessStatFd(ctx context.Context, in *ProcessStatFdParam, opts ...grpc.CallOption) (*ProcessStatFdRsp, error) {
	out := new(ProcessStatFdRsp)
	err := c.cc.Invoke(ctx, "/demo.v3.MetricQueryService/queryProcessStatFd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricQueryServiceClient) QueryProcessStatRss(ctx context.Context, in *ProcessStatRssParam, opts ...grpc.CallOption) (*ProcessStatRssRsp, error) {
	out := new(ProcessStatRssRsp)
	err := c.cc.Invoke(ctx, "/demo.v3.MetricQueryService/queryProcessStatRss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricQueryServiceClient) QueryProcessStatVirtualSize(ctx context.Context, in *ProcessStatVirtualSizeParam, opts ...grpc.CallOption) (*ProcessStatVirtualSizeRsp, error) {
	out := new(ProcessStatVirtualSizeRsp)
	err := c.cc.Invoke(ctx, "/demo.v3.MetricQueryService/queryProcessStatVirtualSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricQueryServiceClient) QueryJvmMem(ctx context.Context, in *JvmMemParam, opts ...grpc.CallOption) (*JvmMemRsp, error) {
	out := new(JvmMemRsp)
	err := c.cc.Invoke(ctx, "/demo.v3.MetricQueryService/queryJvmMem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricQueryServiceClient) QueryJvmGcCount(ctx context.Context, in *JvmGcCountParam, opts ...grpc.CallOption) (*JvmGcCountRsp, error) {
	out := new(JvmGcCountRsp)
	err := c.cc.Invoke(ctx, "/demo.v3.MetricQueryService/queryJvmGcCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricQueryServiceClient) QueryJvmGcCostTime(ctx context.Context, in *JvmGcCostTimeParam, opts ...grpc.CallOption) (*JvmGcCostTimeRsp, error) {
	out := new(JvmGcCostTimeRsp)
	err := c.cc.Invoke(ctx, "/demo.v3.MetricQueryService/queryJvmGcCostTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricQueryServiceClient) QueryJvmThread(ctx context.Context, in *JvmThreadParam, opts ...grpc.CallOption) (*JvmThreadRsp, error) {
	out := new(JvmThreadRsp)
	err := c.cc.Invoke(ctx, "/demo.v3.MetricQueryService/queryJvmThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricQueryServiceClient) QueryJvmClass(ctx context.Context, in *JvmClassParam, opts ...grpc.CallOption) (*JvmClassRsp, error) {
	out := new(JvmClassRsp)
	err := c.cc.Invoke(ctx, "/demo.v3.MetricQueryService/queryJvmClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricQueryServiceClient) QueryGoMem(ctx context.Context, in *GoMemParam, opts ...grpc.CallOption) (*GoMemRsp, error) {
	out := new(GoMemRsp)
	err := c.cc.Invoke(ctx, "/demo.v3.MetricQueryService/queryGoMem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricQueryServiceClient) QueryGoGcCount(ctx context.Context, in *GoGcCountParam, opts ...grpc.CallOption) (*GoGcCountRsp, error) {
	out := new(GoGcCountRsp)
	err := c.cc.Invoke(ctx, "/demo.v3.MetricQueryService/queryGoGcCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricQueryServiceClient) QueryGoroutineCount(ctx context.Context, in *GoroutineCountParam, opts ...grpc.CallOption) (*GoroutineCountRsp, error) {
	out := new(GoroutineCountRsp)
	err := c.cc.Invoke(ctx, "/demo.v3.MetricQueryService/queryGoroutineCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricQueryServiceServer is the server API for MetricQueryService service.
// All implementations must embed UnimplementedMetricQueryServiceServer
// for forward compatibility
type MetricQueryServiceServer interface {
	QueryCpuUsage(context.Context, *CpuUsagesssParam) (*CpuUsageRsp, error)
	QueryProcessStatFd(context.Context, *ProcessStatFdParam) (*ProcessStatFdRsp, error)
	QueryProcessStatRss(context.Context, *ProcessStatRssParam) (*ProcessStatRssRsp, error)
	QueryProcessStatVirtualSize(context.Context, *ProcessStatVirtualSizeParam) (*ProcessStatVirtualSizeRsp, error)
	QueryJvmMem(context.Context, *JvmMemParam) (*JvmMemRsp, error)
	QueryJvmGcCount(context.Context, *JvmGcCountParam) (*JvmGcCountRsp, error)
	QueryJvmGcCostTime(context.Context, *JvmGcCostTimeParam) (*JvmGcCostTimeRsp, error)
	QueryJvmThread(context.Context, *JvmThreadParam) (*JvmThreadRsp, error)
	QueryJvmClass(context.Context, *JvmClassParam) (*JvmClassRsp, error)
	QueryGoMem(context.Context, *GoMemParam) (*GoMemRsp, error)
	QueryGoGcCount(context.Context, *GoGcCountParam) (*GoGcCountRsp, error)
	QueryGoroutineCount(context.Context, *GoroutineCountParam) (*GoroutineCountRsp, error)
	mustEmbedUnimplementedMetricQueryServiceServer()
}

// UnimplementedMetricQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricQueryServiceServer struct {
}

func (UnimplementedMetricQueryServiceServer) QueryCpuUsage(context.Context, *CpuUsagesssParam) (*CpuUsageRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCpuUsage not implemented")
}
func (UnimplementedMetricQueryServiceServer) QueryProcessStatFd(context.Context, *ProcessStatFdParam) (*ProcessStatFdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProcessStatFd not implemented")
}
func (UnimplementedMetricQueryServiceServer) QueryProcessStatRss(context.Context, *ProcessStatRssParam) (*ProcessStatRssRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProcessStatRss not implemented")
}
func (UnimplementedMetricQueryServiceServer) QueryProcessStatVirtualSize(context.Context, *ProcessStatVirtualSizeParam) (*ProcessStatVirtualSizeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProcessStatVirtualSize not implemented")
}
func (UnimplementedMetricQueryServiceServer) QueryJvmMem(context.Context, *JvmMemParam) (*JvmMemRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJvmMem not implemented")
}
func (UnimplementedMetricQueryServiceServer) QueryJvmGcCount(context.Context, *JvmGcCountParam) (*JvmGcCountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJvmGcCount not implemented")
}
func (UnimplementedMetricQueryServiceServer) QueryJvmGcCostTime(context.Context, *JvmGcCostTimeParam) (*JvmGcCostTimeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJvmGcCostTime not implemented")
}
func (UnimplementedMetricQueryServiceServer) QueryJvmThread(context.Context, *JvmThreadParam) (*JvmThreadRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJvmThread not implemented")
}
func (UnimplementedMetricQueryServiceServer) QueryJvmClass(context.Context, *JvmClassParam) (*JvmClassRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJvmClass not implemented")
}
func (UnimplementedMetricQueryServiceServer) QueryGoMem(context.Context, *GoMemParam) (*GoMemRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGoMem not implemented")
}
func (UnimplementedMetricQueryServiceServer) QueryGoGcCount(context.Context, *GoGcCountParam) (*GoGcCountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGoGcCount not implemented")
}
func (UnimplementedMetricQueryServiceServer) QueryGoroutineCount(context.Context, *GoroutineCountParam) (*GoroutineCountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGoroutineCount not implemented")
}
func (UnimplementedMetricQueryServiceServer) mustEmbedUnimplementedMetricQueryServiceServer() {}

// UnsafeMetricQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricQueryServiceServer will
// result in compilation errors.
type UnsafeMetricQueryServiceServer interface {
	mustEmbedUnimplementedMetricQueryServiceServer()
}

func RegisterMetricQueryServiceServer(s grpc.ServiceRegistrar, srv MetricQueryServiceServer) {
	s.RegisterService(&MetricQueryService_ServiceDesc, srv)
}

func _MetricQueryService_QueryCpuUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuUsagesssParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricQueryServiceServer).QueryCpuUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v3.MetricQueryService/queryCpuUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricQueryServiceServer).QueryCpuUsage(ctx, req.(*CpuUsagesssParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricQueryService_QueryProcessStatFd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStatFdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricQueryServiceServer).QueryProcessStatFd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v3.MetricQueryService/queryProcessStatFd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricQueryServiceServer).QueryProcessStatFd(ctx, req.(*ProcessStatFdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricQueryService_QueryProcessStatRss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStatRssParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricQueryServiceServer).QueryProcessStatRss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v3.MetricQueryService/queryProcessStatRss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricQueryServiceServer).QueryProcessStatRss(ctx, req.(*ProcessStatRssParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricQueryService_QueryProcessStatVirtualSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStatVirtualSizeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricQueryServiceServer).QueryProcessStatVirtualSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v3.MetricQueryService/queryProcessStatVirtualSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricQueryServiceServer).QueryProcessStatVirtualSize(ctx, req.(*ProcessStatVirtualSizeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricQueryService_QueryJvmMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JvmMemParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricQueryServiceServer).QueryJvmMem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v3.MetricQueryService/queryJvmMem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricQueryServiceServer).QueryJvmMem(ctx, req.(*JvmMemParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricQueryService_QueryJvmGcCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JvmGcCountParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricQueryServiceServer).QueryJvmGcCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v3.MetricQueryService/queryJvmGcCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricQueryServiceServer).QueryJvmGcCount(ctx, req.(*JvmGcCountParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricQueryService_QueryJvmGcCostTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JvmGcCostTimeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricQueryServiceServer).QueryJvmGcCostTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v3.MetricQueryService/queryJvmGcCostTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricQueryServiceServer).QueryJvmGcCostTime(ctx, req.(*JvmGcCostTimeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricQueryService_QueryJvmThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JvmThreadParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricQueryServiceServer).QueryJvmThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v3.MetricQueryService/queryJvmThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricQueryServiceServer).QueryJvmThread(ctx, req.(*JvmThreadParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricQueryService_QueryJvmClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JvmClassParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricQueryServiceServer).QueryJvmClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v3.MetricQueryService/queryJvmClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricQueryServiceServer).QueryJvmClass(ctx, req.(*JvmClassParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricQueryService_QueryGoMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoMemParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricQueryServiceServer).QueryGoMem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v3.MetricQueryService/queryGoMem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricQueryServiceServer).QueryGoMem(ctx, req.(*GoMemParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricQueryService_QueryGoGcCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoGcCountParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricQueryServiceServer).QueryGoGcCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v3.MetricQueryService/queryGoGcCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricQueryServiceServer).QueryGoGcCount(ctx, req.(*GoGcCountParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricQueryService_QueryGoroutineCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoroutineCountParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricQueryServiceServer).QueryGoroutineCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v3.MetricQueryService/queryGoroutineCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricQueryServiceServer).QueryGoroutineCount(ctx, req.(*GoroutineCountParam))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricQueryService_ServiceDesc is the grpc.ServiceDesc for MetricQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.v3.MetricQueryService",
	HandlerType: (*MetricQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "queryCpuUsage",
			Handler:    _MetricQueryService_QueryCpuUsage_Handler,
		},
		{
			MethodName: "queryProcessStatFd",
			Handler:    _MetricQueryService_QueryProcessStatFd_Handler,
		},
		{
			MethodName: "queryProcessStatRss",
			Handler:    _MetricQueryService_QueryProcessStatRss_Handler,
		},
		{
			MethodName: "queryProcessStatVirtualSize",
			Handler:    _MetricQueryService_QueryProcessStatVirtualSize_Handler,
		},
		{
			MethodName: "queryJvmMem",
			Handler:    _MetricQueryService_QueryJvmMem_Handler,
		},
		{
			MethodName: "queryJvmGcCount",
			Handler:    _MetricQueryService_QueryJvmGcCount_Handler,
		},
		{
			MethodName: "queryJvmGcCostTime",
			Handler:    _MetricQueryService_QueryJvmGcCostTime_Handler,
		},
		{
			MethodName: "queryJvmThread",
			Handler:    _MetricQueryService_QueryJvmThread_Handler,
		},
		{
			MethodName: "queryJvmClass",
			Handler:    _MetricQueryService_QueryJvmClass_Handler,
		},
		{
			MethodName: "queryGoMem",
			Handler:    _MetricQueryService_QueryGoMem_Handler,
		},
		{
			MethodName: "queryGoGcCount",
			Handler:    _MetricQueryService_QueryGoGcCount_Handler,
		},
		{
			MethodName: "queryGoroutineCount",
			Handler:    _MetricQueryService_QueryGoroutineCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query/Metric.proto",
}
